class ListNode:
    def __init__(self, val):
        self.val = val
        self.next = None

class List:
    def __init__(self):
        self.head = None
        self.size = 0

    def append(self, val):
        if self.head is None:
            self.head = ListNode(val)
        else:
            node = self.head
            while node.next is not None:
                node = node.next
            node.next = ListNode(val)
        self.size += 1

    def getListHead(self):
        return self.head

    def getNextNode(self, node):
        return node.next

    def getLastNode(self):
        node = self.head
        while node.next is not None:
            node = node.next
        return node


class Stack:
    def __init__(self, uinput):
        self.list = List()
        self.container = uinput.replace("(", "").replace(")","").split(' ')

    def evaluation(self):
        for item in self.container[::-1]:
            if len(item) > 1:
                if item[0] == '-':
                    self.push(int(item))
                    continue
                else:
                    self.push(int(item))
            elif item.isdigit():
                self.push(int(item))
            else:
                if self.list.size >= 2:
                    num1 = self.pop()
                    num2 = self.pop()
                    if item == "+":
                        self.push(int(num1 + num2))
                    elif item == "-":
                        self.push(int(num1 - num2))
                    elif item == "*":
                        self.push(int(num1 * num2))
                    else:
                        self.push(int(num1 / num2))
        return self.pop()

    def ret_cont(self):
        return self.container

    def push(self, val):
        node = ListNode(val)
        node.next = self.list.head
        self.list.head = node
        self.list.size += 1

    def pop(self):
        if self.list.head == None:
            return None
        else:
            val = self.list.head.val
            self.list.head = self.list.head.next
            self.list.size -= 1
            return val


user_input = Stack(input('Please enter an s-expression here: '))
print(user_input.ret_cont())
print(user_input.evaluation())

